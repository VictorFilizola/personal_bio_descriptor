@page "/director/dashboard"
@attribute [Authorize(Roles = "Director, Master")]

@using LE_Digital_2_Blazor_Server_WebApp.Core.Models
@using LE_Digital_2_Blazor_Server_WebApp.Core.Interfaces
@using System.Security.Claims @* Add this line *@
@inject IDirectorService DirectorService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<h3>Director Dashboard - Pending Allocations</h3>

@if (pendingAllocations == null)
{
    <p><em>Loading your tasks...</em></p>
}
else if (!pendingAllocations.Any())
{
    <div class="alert alert-success">You have no pending budget allocations.</div>
}
else
{
    @* Table remains the same *@
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Version ID</th>
                <th>VP Name</th>
                <th>Total Investment</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var alloc in pendingAllocations)
            {
                <tr>
                    <td>@alloc.VersionID</td>
                    <td>@alloc.VpName</td>
                    <td>@alloc.TotalInvestment?.ToString("C")</td>
                    <td><span class="badge bg-warning">@alloc.Status</span></td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToAllocation(alloc.VpID)">
                            Allocate to Managers
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<VpParent>? pendingAllocations;
    // Remove the ClaimsPrincipal? currentUser; line

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User; // Get the user principal directly
        if (user?.Identity?.IsAuthenticated ?? false)
        {
            // Pass the non-nullable user principal
            pendingAllocations = await DirectorService.GetPendingAllocationsAsync(user);
        }
        else
        {
            pendingAllocations = new List<VpParent>(); // Initialize if not authenticated
        }
    }

    void NavigateToAllocation(int vpId)
    {
        NavigationManager.NavigateTo($"/director/allocate-managers/{vpId}");
    }
}