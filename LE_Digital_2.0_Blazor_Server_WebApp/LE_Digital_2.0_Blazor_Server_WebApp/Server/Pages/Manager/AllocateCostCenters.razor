@page "/manager/allocate-cost-centers/{ManagerParentId:int}"
@attribute [Authorize(Roles = "Manager, Director, Master")]

@using System.Globalization
@using LE_Digital_2_Blazor_Server_WebApp.Core.Models
@inject IManagerService ManagerService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<AllocateCostCenters> Logger

@if (managerTask == null || costCenters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <h3 class="card-title">Cost Center Allocation (Version @managerTask.VersionID) for @managerTask.ManagerName</h3>
            <div class="d-flex justify-content-between">
                <div>
                    <strong>Total Budget Assigned:</strong>
                    <span class="text-primary">@managerTask.AllocatedInvestment?.ToString("C", ptBR)</span>
                </div>
                <div>
                    <strong>Total Allocated to Cost Centers:</strong>
                    <span class="@(UsedTotal > managerTask.AllocatedInvestment ? "text-danger" : "text-success")">@UsedTotal.ToString("C", ptBR)</span>
                </div>
                <div>
                    <strong>Remaining Budget:</strong>
                    <span class="@(RemainingValue < 0 ? "text-danger" : "")">@RemainingValue.ToString("C", ptBR)</span>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <button class="btn btn-success" @onclick="OnFinishClicked" disabled="@(IsFinishDisabled())">
            <span class="oi oi-check" aria-hidden="true"></span> Finish and Submit All Cost Centers
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="table-container">
        <table class="table table-bordered table-striped">
            <thead class="table-light">
                <tr>
                    <th>Status</th>
                    <th>Cost Center</th>
                    <th>Cost Center Name</th>
                    <th>User (Manager)</th>
                    <th>VP</th>
                    <th style="width: 200px;">Allocated Value (CC Total)</th>
                    <th style="width: 200px;">Used Value (Monthly Sum)</th>
                    <th style="width: 100px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cc in costCenters)
                {
                    <tr>
                        <td><span class="badge @GetStatusBadgeClass(cc.Status)">@cc.Status</span></td>
                        <td>@cc.CostCenterCode</td>
                        <td>@cc.CostCenterName</td>
                        <td>@cc.User</td>
                        <td>@cc.Vp</td>
                        <td class="text-end">@cc.AllocatedValue?.ToString("C", ptBR)</td>
                        <td class="text-end">@cc.UsedValue?.ToString("C", ptBR)</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenAllocationValuePopup(cc)">
                                <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (showWarningPopup)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Warning: Budget Not Fully Allocated</h5>
                    <button type="button" class="btn-close" @onclick="CancelWarning"></button>
                </div>
                <div class="modal-body">
                    <p>The total allocated value for cost centers (@UsedTotal.ToString("C", ptBR)) is less than your assigned budget (@managerTask?.AllocatedInvestment?.ToString("C", ptBR)).</p>
                    <p>A value of <strong>@RemainingValue.ToString("C", ptBR)</strong> is missing.</p>
                    <p>Do you want to proceed and mark this step as complete?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelWarning">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ProceedAnyway">Yes, Proceed</button>
                </div>
            </div>
        </div>
    </div>
}

@if (selectedCostCenterForAllocation != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Set Allocated Value for @selectedCostCenterForAllocation.CostCenterCode</h5>
                    <button type="button" class="btn-close" @onclick="CloseAllocationValuePopup"></button>
                </div>
                <div class="modal-body">
                    <p>Enter the total budget you want to allocate to this cost center (@selectedCostCenterForAllocation.CostCenterName) for the year.</p>
                    <div class="input-group mb-3">
                        <span class="input-group-text">R$</span>
                        <input type="number" step="0.01" class="form-control" @bind="currentAllocationValueInput" placeholder="0.00" />
                    </div>
                    @if (!string.IsNullOrEmpty(popupErrorMessage))
                    {
                        <div class="alert alert-danger mt-2">@popupErrorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAllocationValuePopup">Cancel</button>
                    @* Make button async *@
                    <button type="button" class="btn btn-primary" @onclick="async () => await SaveValueAndNavigateToEditDetails()">Confirm and Edit Details</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int ManagerParentId { get; set; }

    private ManagerParent? managerTask;
    private List<CostCenterParent>? costCenters;
    private string? errorMessage;
    private string? popupErrorMessage;
    private bool showWarningPopup = false;
    private CultureInfo ptBR = new CultureInfo("pt-BR");

    private CostCenterParent? selectedCostCenterForAllocation;
    private decimal? currentAllocationValueInput;

    private decimal UsedTotal => costCenters?.Sum(c => c.AllocatedValue ?? 0) ?? 0;
    private decimal RemainingValue => (managerTask?.AllocatedInvestment ?? 0) - UsedTotal;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing AllocateCostCenters for ManagerParentId {Id}", ManagerParentId);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity?.IsAuthenticated == false)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // *** FIX: Add null check for user ***
        if (user == null)
        {
            Logger.LogError("User principal is null in OnInitializedAsync.");
            errorMessage = "Authentication error occurred.";
            return;
        }
        managerTask = await ManagerService.GetManagerTaskDetailsAsync(ManagerParentId, user);

        managerTask = await ManagerService.GetManagerTaskDetailsAsync(ManagerParentId, user);
        if (managerTask == null)
        {
            Logger.LogWarning("Manager task {Id} not found or user not authorized.", ManagerParentId);
            NavigationManager.NavigateTo("/manager/dashboard");
            return;
        }

        costCenters = await ManagerService.GetCostCentersForManagerAsync(ManagerParentId);
        Logger.LogInformation("Loaded {Count} cost centers for Manager task {Id}", costCenters.Count, ManagerParentId);
    }

    // --- Pop-up Logic ---
    private void OpenAllocationValuePopup(CostCenterParent costCenter)
    {
        popupErrorMessage = null;
        selectedCostCenterForAllocation = costCenter;
        currentAllocationValueInput = selectedCostCenterForAllocation.AllocatedValue; // Pre-fill
        Logger.LogInformation("Opening pop-up for CC {Code} (ID: {Id})", costCenter.CostCenterCode, costCenter.CostCenterID);
    }

    private void CloseAllocationValuePopup()
    {
        selectedCostCenterForAllocation = null;
        currentAllocationValueInput = null;
        popupErrorMessage = null;
    }

    private async Task SaveValueAndNavigateToEditDetails()
    {
        popupErrorMessage = null;
        if (selectedCostCenterForAllocation == null || currentAllocationValueInput == null || currentAllocationValueInput < 0)
        {
            popupErrorMessage = "Please enter a valid, non-negative allocation value.";
            return;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Logger.LogInformation("Attempting to save AllocatedValue {Value} for CC ID {Id}", currentAllocationValueInput.Value, selectedCostCenterForAllocation.CostCenterID);
        bool success = await ManagerService.UpdateCostCenterAllocatedValueAsync(
            selectedCostCenterForAllocation.CostCenterID,
            currentAllocationValueInput.Value,
            user);

        if (success)
        {
            // Update value in the local list for immediate feedback
            selectedCostCenterForAllocation.AllocatedValue = currentAllocationValueInput.Value;
            selectedCostCenterForAllocation.Status = "Pendente"; // Reset status

            Logger.LogInformation("Save successful. Navigating to Edit Details for CC ID: {Id}", selectedCostCenterForAllocation.CostCenterID);

            var costCenterIdToNavigate = selectedCostCenterForAllocation.CostCenterID;
            CloseAllocationValuePopup(); // Close popup first

            NavigationManager.NavigateTo($"/manager/edit-cost-center/{costCenterIdToNavigate}");
        }
        else
        {
            popupErrorMessage = "Failed to save allocated value. Please check permissions or try again.";
            Logger.LogError("Failed to save AllocatedValue for CC ID: {CostCenterID}", selectedCostCenterForAllocation?.CostCenterID);
        }
    }


    // --- Finish Logic (Main Page) ---
    private bool IsFinishDisabled()
    {
        if (managerTask == null || costCenters == null) return true;
        // Can only finish if ALL cost centers are 'Realizado' AND total <= budget
        bool anyPending = costCenters.Any(cc => cc.Status != "Realizado");
        bool overBudget = UsedTotal > managerTask.AllocatedInvestment;
        return anyPending || overBudget;
    }

    private string GetStatusBadgeClass(string? status) => status switch
    {
        "Realizado" => "bg-success",
        "Pendente" => "bg-warning",
        _ => "bg-secondary" // Default or "Não realizado"
    };

    private async Task OnFinishClicked()
    {
        errorMessage = null;
        if (IsFinishDisabled())
        {
            // Check specific reason
            if (costCenters != null && costCenters.Any(cc => cc.Status != "Realizado"))
            {
                errorMessage = "Cannot finish. Not all cost centers have been marked 'Realizado'. Please complete all allocations first.";
            }
            else if (UsedTotal > (managerTask?.AllocatedInvestment ?? 0))
            {
                errorMessage = "Cannot finish. The total allocated value to cost centers exceeds your assigned budget.";
            }
            return;
        }

        if (UsedTotal < (managerTask?.AllocatedInvestment ?? 0))
        {
            showWarningPopup = true; // Ask confirmation if under budget but all done
        }
        else // Exactly equals allocated budget and all done
        {
            await CompleteManagerTask();
        }
    }

    private async Task CompleteManagerTask()
    {
        if (managerTask == null) return;
        Logger.LogInformation("Attempting to finalize ManagerParent task {Id}", managerTask.ManagerID);
        try
        {
            await ManagerService.FinishManagerTaskAsync(managerTask.ManagerID);
            NavigationManager.NavigateTo("/manager/dashboard");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error finalizing step: {ex.Message}";
            Logger.LogError(ex, "Error finalizing manager task {ManagerParentId}", managerTask.ManagerID);
        }
    }

    private void CancelWarning() => showWarningPopup = false;

    private async Task ProceedAnyway()
    {
        showWarningPopup = false;
        await CompleteManagerTask();
    }
}