@using LE_Digital_2_Blazor_Server_WebApp.Core.Models
@using LE_Digital_2_Blazor_Server_WebApp.Core.Interfaces
@using System.Security.Claims

@inject IManagerService ManagerService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<SetAllocatedValuePopup> Logger

@if (IsVisible && TargetCostCenter != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" style="display:block" role="dialog" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Set Allocated Value for @TargetCostCenter.CostCenterCode</h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    <p>Enter the total budget you want to allocate to this cost center (@TargetCostCenter.CostCenterName) for the year.</p>
                    <div class="input-group mb-3">
                        <span class="input-group-text">R$</span>
                        <input type="number" step="0.01" class="form-control" @bind="allocationValueInput" placeholder="0.00" />
                    </div>
                    @if (!string.IsNullOrEmpty(popupErrorMessage))
                    {
                        <div class="alert alert-danger mt-2">@popupErrorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="async () => await SaveValueAndNavigate()">Confirm and Edit Details</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public CostCenterParent? TargetCostCenter { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private decimal? allocationValueInput;
    private string? popupErrorMessage;

    protected override void OnParametersSet()
    {
        if (IsVisible && TargetCostCenter != null)
        {
            allocationValueInput = TargetCostCenter.AllocatedValue;
        }
        else
        {
            allocationValueInput = null;
        }
        popupErrorMessage = null;
    }

    private async Task SaveValueAndNavigate()
    {
        popupErrorMessage = null;
        if (TargetCostCenter == null || allocationValueInput == null || allocationValueInput < 0)
        {
            popupErrorMessage = "Please enter a valid, non-negative allocation value.";
            return;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user == null)
        {
            popupErrorMessage = "Authentication error occurred.";
            Logger.LogError("User principal is null in SaveValueAndNavigate.");
            return;
        }

        Logger.LogInformation("Attempting to save AllocatedValue {Value} for CC ID {Id}", allocationValueInput.Value, TargetCostCenter.CostCenterID);

        // *** FIX: Changed method name to match the interface ***
        bool success = await ManagerService.UpdateCostCenterAllocatedValueAsync(
            TargetCostCenter.CostCenterID,
            allocationValueInput.Value,
            user);

        if (success)
        {
            Logger.LogInformation("Save successful. Navigating to Edit Details for CC ID: {Id}", TargetCostCenter.CostCenterID);
            var costCenterIdToNavigate = TargetCostCenter.CostCenterID;
            await ClosePopup(); // Close the popup
            NavigationManager.NavigateTo($"/manager/edit-cost-center/{costCenterIdToNavigate}");
        }
        else
        {
            popupErrorMessage = "Failed to save allocated value. Please check permissions or try again.";
            Logger.LogError("Failed to save AllocatedValue for CC ID: {CostCenterID}", TargetCostCenter?.CostCenterID);
        }
    }

    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(); // Notify parent component to hide the popup
    }
}